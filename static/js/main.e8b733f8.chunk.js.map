{"version":3,"sources":["components/Wrapper/index.js","components/Card/index.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","Object","assign","className","Card","alt","name","src","image","onClick","randomizePics","id","occupation","chosen","App","state","pics","score","topScore","handleScoreChange","_this","setState","handleTopScoreChange","includes","alert","push","shuffle","console","log","i","this","length","j","Math","floor","random","_ref","_this2","components_Wrapper","map","pic","components_Card","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"6/EAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAAC,OAAAC,OAAA,CAAMC,UAAU,WAAcN,kBCmBxBO,MApBf,SAAcP,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOC,QAAS,kBAAMZ,EAAMa,cAAcb,EAAMc,QAEjFb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACfL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMS,MAEhCR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BADF,IACgCH,EAAMe,gBCV5CC,EAAS,GA4EEC,6MAxEbC,MAAQ,CACNC,OACAC,MAAO,EACPC,SAAU,KAGZC,kBAAoB,WAElBC,EAAKC,SAAS,CAAEJ,MAAOG,EAAKL,MAAME,MAAQ,OAG5CK,qBAAuB,WAClBF,EAAKL,MAAME,OAASG,EAAKL,MAAMG,UAChCE,EAAKC,SAAS,CAACH,SAAUE,EAAKL,MAAME,WAYxCP,cAAgB,SAAAC,GAEdE,EAAOU,SAASZ,IAChBa,MAAM,oDACNX,EAAS,GACTO,EAAKC,SAAS,CACZJ,MAAO,IAETG,EAAKE,yBAGLT,EAAOY,KAAKd,GACZS,EAAKD,qBAGL,IAAMH,EAAOI,EAAKM,QAAQN,EAAKL,MAAMC,MACrCW,QAAQC,IAAIZ,GAGZI,EAAKC,SAAS,CAAEL,iFA3BVjB,GACN,IAAK,IAAI8B,EAAIC,KAAKf,MAAMC,KAAKe,OAAS,EAAGF,EAAI,EAAGA,IAAK,CACjD,IAAMG,EAAIC,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IADOO,EAElC,CAACrC,EAAEiC,GAAIjC,EAAE8B,IAAvB9B,EAAE8B,GAF8CO,EAAA,GAE1CrC,EAAEiC,GAFwCI,EAAA,GAIrD,OAAOrC,mCAyBF,IAAAsC,EAAAP,KACP,OACIhC,EAAAC,EAAAC,cAAA,OAAKG,UAAY,aACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAY,aACjBL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,oBAAY8B,KAAKf,MAAME,MAAvB,iBAA4Ca,KAAKf,MAAMG,WAEvDpB,EAAAC,EAAAC,cAACsC,EAAD,KACCR,KAAKf,MAAMC,KAAKuB,IAAI,SAAAC,GAAG,OACtB1C,EAAAC,EAAAC,cAACyC,EAAD,CACE/B,cAAe2B,EAAK3B,cACpBC,GAAI6B,EAAI7B,GACR+B,IAAKF,EAAI7B,GACTL,KAAMkC,EAAIlC,KACVE,MAAOgC,EAAIhC,MACXI,WAAY4B,EAAI5B,wBAjEV+B,mBCFlBC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e8b733f8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n      <div className=\"card\">\n        <div className=\"img-container\">\n        <img alt={props.name} src={props.image} onClick={() => props.randomizePics(props.id)} />\n        </div>\n        <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Occupation:</strong> {props.occupation}\n          </li>\n        </ul>\n      </div>\n      </div>\n  );\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport pics from \"./pics.json\";\nimport Card from \"./components/Card\";\n\nlet chosen = [] \n// Setting the state\nclass App extends Component {\n  \n  state = {\n    pics,\n    score: 0,\n    topScore: 0,\n  };\n  //incrementing score by 1 and setting new state.score\n  handleScoreChange = () => {\n    \n    this.setState({ score: this.state.score + 1})\n  };\n//setting new state if current score is bigger than the current top score\n  handleTopScoreChange = () => { \n    if(this.state.score >= this.state.topScore){\n      this.setState({topScore: this.state.score})\n    }\n  }\n//randomly shuffle pics from the json file\n  shuffle(a) { \n    for (let i = this.state.pics.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n//either change the top score or the current score based on the chosen pic, shuffle photos and set new state.\n  randomizePics = id => {\n\nif (chosen.includes(id)){ \n    alert(\"You already chose that character! Start Again!!!\")\n    chosen = []\n    this.setState({\n      score: 0\n    })\n    this.handleTopScoreChange()\n}\nelse{\n    chosen.push(id)\n    this.handleScoreChange()\n}\n\n    const pics = this.shuffle(this.state.pics)\n    console.log(pics)\n    \n    \n    this.setState({ pics });\n  };\n//generate what we'll actually be seeing on the client side\nrender() { \n  return (\n      <div className = \"container\"> \n        <div className = \"jumbotron\">\n        <h1>React Memory Game</h1>\n        <h2>Click on an image to start!</h2>\n        <h2>Score: {this.state.score} | Top Score: {this.state.topScore}</h2>\n        </div>\n        <Wrapper>\n        {this.state.pics.map(pic => ( \n          <Card\n            randomizePics={this.randomizePics}\n            id={pic.id}\n            key={pic.id}\n            name={pic.name}\n            image={pic.image}\n            occupation={pic.occupation}\n          />\n        ))}\n        </Wrapper>\n      </div>\n  );\n}\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}